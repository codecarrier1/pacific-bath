<?php

namespace Tests\Feature\Api;

use App\Lead;
use App\Notifications\NewLeadHasBeenAssigned;
use App\Service;
use App\Actions\SalesforceService;
use App\User;
use Illuminate\Support\Facades\Queue;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Notification;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Str;
use Mockery\Mock;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class LeadControllerTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;

    private $email;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(\SalesDispositionSeeder::class);
        $this->seed(\ServiceSeeder::class);
        $this->seed(\RoleAndPermissionSeeder::class);
        $this->seed(\LocationSeeder::class);
        $this->seed(\RealUserSeeder::class);
        $this->email = $this->faker->email;
    }

    /** @test */
    public function it_returns_a_200_reponse_and_creates_a_new_lead()
    {
        $this->withoutExceptionHandling();
        Notification::fake();
        Queue::fake(); // prevent jobs being fired
        $soapData = file_get_contents(base_path('tests/sampleNotification.xml'));
        $xml = $this->insertFakeData($soapData);
        $expectedResponse = base_path('tests/expectedresponse.xml');
        $leadCount = Lead::count();
        $response = $this->call('POST', route('api.lead'), [], [], [], [], $xml);
        $response->assertOk();
        $this->assertXmlStringEqualsXmlFile($expectedResponse, $response->getContent());
        $this->assertEquals($leadCount + 1, Lead::count());
        $lead = Lead::latest()->first();
        $this->assertEquals($this->email, $lead->email);
        Notification::assertSentTo([$lead->user], NewLeadHasBeenAssigned::class);
    }



    protected function insertFakeData($data)
    {

        $salesRep = User::Role('Sales Representative')->inRandomOrder()->firstOrFail();
        $service = Service::inRandomOrder()->first();
        $fullName = $this->faker->lastName . ", " . $this->faker->firstName;
        $data = str_replace('FAKER_ADDRESS', $this->faker->streetAddress, $data);
        $data = str_replace('FAKER_CITY', $this->faker->city, $data);
        $data = str_replace('FAKER_EMAIL', $this->email, $data);
        $data = str_replace('FAKER_LAST_FIRST', $fullName , $data);
        $data = str_replace('FAKER_PROSPECT_ID', Str::random(), $data);
        $data = str_replace('FAKER_SOURCE', Str::random(), $data);
        $data = str_replace('SALES_REP_SALESFORCE_ID', $salesRep->salesforce_id, $data);
        $data = str_replace('FAKER_STATE_ABBREV', $this->faker->stateAbbr, $data);
        $data = str_replace('FAKER_ZIP', $this->faker->postcode, $data);
        $data = str_replace('SERVICE_NAME', $service->name, $data);
        $data = str_replace('START_DATE_TIME', now()->addHours(48), $data);

        return $data;
    }
}
