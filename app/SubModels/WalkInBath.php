<?php

namespace App\SubModels;

use App\Color;
use App\Interfaces\SubModel;
use App\Product;
use App\ProductCategory;
use App\ProductSubCategory;
use App\Scopes\WalkInBathScope;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Cache;

/**
 * App\SubModels\WalkInBath
 *
 * @property int $id
 * @property string $sku
 * @property float $price
 * @property int $product_category_id
 * @property int|null $product_sub_category_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \App\ProductCategory $category
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Color[] $colors
 * @property-read int|null $colors_count
 * @property-read mixed $fixture_color_id
 * @property-read mixed $plumbing_position
 * @property-read mixed $tub_color_id
 * @property-read \Illuminate\Database\Eloquent\Collection|\Spatie\MediaLibrary\Models\Media[] $media
 * @property-read int|null $media_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Option[] $options
 * @property-read int|null $options_count
 * @property-read \App\ProductSubCategory|null $subCategory
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath query()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath wherePrice($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath whereProductCategoryId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath whereProductSubCategoryId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath whereSku($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\SubModels\WalkInBath whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class WalkInBath extends Product implements SubModel
{
    protected  $table = 'products';

    protected $appends = ['plumbing_position', 'fixture_color_id', 'tub_color_id'];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope(new WalkInBathScope);
    }

    // TODO appends and accessors



    public function getPlumbingPositionAttribute()
    {
        return Cache::rememberForever('plumbing_position_' . $this->id, function (){
            return $this->options()->where('key', 'plumbing_position')->first()->value ?? '?';
        });
    }

    public function getTubColorIdAttribute()
    {
        return Cache::tags(['colors'])->rememberForever('tub_color_' . $this->id, function (){
            return $this->options()->where('key', 'tub_color_id')->first()->value ?? '?';
        });
    }

    public function getFixtureColorIdAttribute()
    {
        return Cache::tags(['colors'])->rememberForever('fixture_color_' . $this->id, function (){
            return $this->options()->where('key', 'fixture_color_id')->first()->value ?? '?';
        });
    }


    public static function getResponseData(Collection $products)
    {
        $tubColors = self::getColors($products, 'tub_color_id');
        $fixtureColors = self::getColors($products, 'fixture_color_id');
        $plumbingPositions = $products->pluck('plumbing_position')->unique()->toArray();
        $subCategories = ProductSubCategory::select('id', 'name')
            ->withCount('products')
            ->where('product_category_id', ProductCategory::WALK_IN_BATHS)
            ->get()->each->getImage()->toArray();

        return [
            'products' => $products,
            'tub_colors' => $tubColors,
            'fixture_colors' => $fixtureColors,
            'plumbing_positions' => $plumbingPositions,
            'subCategories' => $subCategories,
        ];
    }

    private static function getColors(Collection $products, $colorKeyName) : array
    {
        $colorIds = $products->pluck($colorKeyName)->unique()->toArray();
        return Color::findMany($colorIds, ['id', 'name'])->toArray();
    }
}
