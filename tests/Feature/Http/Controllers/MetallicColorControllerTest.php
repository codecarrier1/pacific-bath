<?php

namespace Tests\Feature\Http\Controllers;

use App\Http\Controllers\MetallicColorController;
use App\Lead;
use App\User;
use Illuminate\Contracts\Session\Session;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

class MetallicColorControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var \Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model
     */
    private $lead;
    /**
     * @var \Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model
     */
    private $user;
    /**
     * @var int
     */
    private $colorId;
    /**
     * @var string
     */
    private string $keyName;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Event::fake(); // prevent observers from firing for this test
        $this->seed(\RoleAndPermissionSeeder::class);
        $this->lead = factory(Lead::class)->create();
        $this->user = factory(User::class)->state('salesRep')->create();
        $this->colorId = random_int(1, 40);
    }


    /** @test */
    public function store_saves_the_preselected_color_to_the_database()
    {
        $this->assertNull($this->lead->preselected_color_id);
        $response = $this->actingAs($this->user)->post(route('metallic-color.store', [$this->lead]), ['color_id' => $this->colorId]);
        $response->assertNoContent();
        $this->lead->refresh();
        $this->assertEquals($this->colorId, $this->lead->preselected_color_id);
    }

    /** @test */
    public function show_retrieves_the_preselected_color_from_the_database()
    {
        $this->lead->preselected_color_id = $this->colorId;
        $this->lead->save();
        $this->lead->refresh();
        $response = $this->actingAs($this->user)->get(route('metallic-color.show', [$this->lead]));
        $this->assertEquals($this->colorId, (int)$response->getContent());
    }
}
